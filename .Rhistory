library("devtools", lib.loc="~/R/win-library/3.5")
load("~/pharm/R/sysdata.rda")
devtools::use_data(resATC, resATC_Adm.R, resATC_DDD, resATC_info, resCGDA, resMayprevent, resMaytreat, internal = TRUE, overwrite = TRUE)
install.packages(c("roxygen2", "testthat", "knitr"))
library(devtools)
has_devel()
install.packages("devtools")
install.packages("devtools")
install.packages("roxygen2")
install.packages("testthat")
install.packages("knitr")
library(devtools)
has_devel()
library(devtools)
has_devel()
library(roxygen2)
roxygenize()
devtools::document()
#' Get NDC code based on RxCui
#' @import dplyr
#' @import doParallel
#' @import jsonlite
#' @param df data.frame include RxCui
#' @param RxCuiColName A colum for RxCui of df
#' @param Differ_ColName if colum for RxCui of df not named "RxCui"
#' @export
get.AtcViaRxCui <- function(df, RxCuiColName = RxCui, cores=8){
colnames(df)[colnames(df)==deparse(substitute(RxCuiColName))] <- "RxCui"
cl <- makeCluster(cores)
registerDoParallel(cl)
RxNormIdData = foreach(i = 1:nrow(df),
.combine = "rbind",
.packages = "jsonlite") %dopar% {
rxinfo <- fromJSON(paste0("https://rxnav.nlm.nih.gov/REST/rxcui/",df$RxCui[i],"/allrelated"))
ingredient_cui <- data.frame(rxinfo$allRelatedGroup$conceptGroup$conceptProperties[rxinfo$allRelatedGroup$conceptGroup$tty == "IN"])
rx_route <- data.frame(rxinfo$allRelatedGroup$conceptGroup$conceptProperties[rxinfo$allRelatedGroup$conceptGroup$tty == "DFG"])
rxid <- fromJSON(paste0("https://rxnav.nlm.nih.gov/REST/rxcui/",ingredient_cui$rxcui[1],"/allProperties.json?prop=all"))
if(is.null(rxid) || length(rxid$propConceptGroup$propConcept$propValue[rxid$propConceptGroup$propConcept$propName == "ATC"])==0){
AtcTable <- data.frame(RxCui = df$RxCui[i],
Rx_route = NA,
ATC = NA,
stringsAsFactors = FALSE)
}else{
AtcTable <- data.frame(RxCui = df$RxCui[i],
Rx_route = rx_route$name[1],
ATC = rxid$propConceptGroup$propConcept$propValue[rxid$propConceptGroup$propConcept$propName == "ATC"],
stringsAsFactors = FALSE)
}
AtcTable
}
stopCluster(cl)
RxNormIdData <- unique(RxNormIdData)
RxNormIdData <- data.table(RxNormIdData)
RxNormIdData[, Rx_DFG :=  if_else(Rx_route == "Drug Implant Product", "implant",
if_else(Rx_route == "Inhalant Product", "Inhal",
if_else(Rx_route == "Nasal Product", "N",
if_else(Rx_route == "Oral Product", "O",
if_else(Rx_route == "Ophthalmic Product", "lamella",
if_else(Rx_route == "Injectable Product", "P",
if_else(Rx_route == "Rectal Product", "R",
if_else(Rx_route == "Sublingual Product", "SL",
if_else(Rx_route == "Transdermal Product", "TD",
if_else(Rx_route == "Vaginal Product", "V",Rx_route))))))))),
missing = "")]
RxNormIdData <- RxNormIdData %>% select(RxCui, Rx_DFG, ATC)
RxNormIdData <- RxNormIdData %>% left_join(resATC_Adm.R, by = "ATC") %>%
filter(Rx_DFG == Adm.R) %>% select(RxCui, ATC) %>% unique()
RxCui_ATC <- left_join(df,RxNormIdData, by = "RxCui")
colnames(RxCui_ATC)[colnames(RxCui_ATC)=="RxCui"] <- deparse(substitute(RxCuiColName))
return (RxCui_ATC)
}
devtools::document()
devtools::document()
devtools::document()
#' Get NHINO based on RCFNO
#'
#' @import dplyr
#' @param df data.frame include RCFNO
#' @param RCFNoColName A colum for RCFNo of df
#' @param Differ_ColName if colum for NHINo of df not named "RCFNO"
#' @export
#' @example
#' RCFNoToNHINo(rcfno, rcfcolname1)
#'
get.NHINoViaRCFNo <- function(df, RCFNoColName = RCFNO){
colnames(df)[colnames(df)==deparse(substitute(RCFNoColName))] <- "RCFNO"
NHINoData <- df %>%
left_join(resCGDA,by = "RCFNO")
colnames(NHINoData)[colnames(NHINoData)== "RCFNO"] <- deparse(substitute(RCFNoColName))
return(NHINoData)
}
devtools::document()
devtools::document()
#' Get ATC Code based on NHINO
#'
#' @import dplyr
#' @param df data.frame include NHINO
#' @param NHINoColName A colum for NHINo of df
#' @param Differ_ColName if colum for NHINo of df not named "NHINo"
#' @export
#' @example
#' NHINoToAtc(NHINoList)
#'
get.AtcViaNHINo <- function(df, NHINoColName = NHINo){
colnames(df)[colnames(df)==deparse(substitute(NHINoColName))] <- "NHINo"
ATCData <- df %>%
left_join(resATC,by = c("NHINo" = "藥品代號"))
colnames(ATCData)[colnames(ATCData)== "NHINo"] <- deparse(substitute(NHINoColName))
return(ATCData)
}
devtools::document()
devtools::document()
devtools::document()
